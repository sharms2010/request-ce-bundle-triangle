<%@page pageEncoding="UTF-8" trimDirectiveWhitespaces="true"%>
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@taglib prefix="app" uri="http://kineticdata.com/kinetic/core/web/taglibs/app" %>
<%@taglib prefix="bundle" uri="http://kineticdata.com/kinetic/core/web/taglibs/bundle" %>
<%@page import="com.google.common.collect.*" %>
<%@page import="com.kineticdata.core.models.*" %>
<%@page import="com.kineticdata.core.services.BundleSubmissionService" %>
<%@page import="com.kineticdata.core.web.bundles.Bundle" %>
<%@page import="java.util.*" %>
<% 
	Bundle bundle = (Bundle)request.getAttribute("bundle"); 
	
	Controller controller = new Controller(request);
	request.setAttribute("controller", controller);
%>

<%!
	public static class Controller {
		private HttpServletRequest request;
	
		public Controller(HttpServletRequest request) {
			this.request = request;
		}
	
		public List<Submission> getRecords(String formSlug, String coreState) {
			// Extract the current Kapp variable from the request
			Kapp kapp = (Kapp)request.getAttribute("kapp"); // ${kapp}
			// Extract the submission service from the request
			BundleSubmissionService submissions = (BundleSubmissionService)request.getAttribute("submissions");
			// Retrieve the target form
			Form form = kapp.getForm(formSlug);
			if (form == null) {
				throw new RuntimeException("The \""+kapp.getTitle()+"\" kapp does not include a form with the provided slug: "+formSlug);
			}
			// Prepare the search parameters
			Map<String,String[]> parameters = new HashMap<String,String[]>();
			parameters.put("coreState", new String[] {coreState});
			// Execute the search
			List<Submission> records = submissions.searchByForm(form, parameters);
			// Sort the results
			Collections.sort(records, new SubmissionLabelComparator());
			// Return the sorted records
			return records;
		}
	}
%>

<%!
	public static class SubmissionLabelComparator implements Comparator<Submission> {
		public int compare(Submission submission1, Submission submission2) {
			// Comparison logic (link order to be most "important", but also include enough for consistent sorting; 
			// linkorder, name, slug)
			int result;
			try {
				result = ComparisonChain.start()
			         .compare(submission1.getLabel(), submission2.getLabel(), Ordering.natural().nullsLast())
			         .compare(submission1.getId(), submission2.getId(), Ordering.natural().nullsLast())
			         .result();
		    } catch (Exception e) {
		    	throw new RuntimeException("Unable to compare submissions", e);
		    }
		    return result;
		}
	}
%>